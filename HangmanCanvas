/*
 * File: HangmanCanvas.java
 * ------------------------
 * This file keeps track of the Hangman display.
 */

import java.awt.Color;
import acm.graphics.*;

public class HangmanCanvas extends GCanvas {

	/** Resets the display so that only the scaffold appears */
	public void reset() {
		incorrectLetterString = "";
		double scaffoldX = getWidth() / 2 - BEAM_LENGTH;
		double scaffoldY = getHeight() / 2
				- (BODY_LENGTH + 2 * HEAD_RADIUS + ROPE_LENGTH);
		GLine scaffold = new GLine(scaffoldX, scaffoldY, scaffoldX, scaffoldY
				+ SCAFFOLD_HEIGHT);
		double beamX = getWidth() / 2 - BEAM_LENGTH;
		double beamY = getHeight() / 2
				- (BODY_LENGTH + 2 * HEAD_RADIUS + ROPE_LENGTH);
		GLine beam = new GLine(beamX, beamY, beamX + BEAM_LENGTH, beamY);
		double ropeX = getWidth() / 2;
		double ropeY = getHeight() / 2
				- (BODY_LENGTH + 2 * HEAD_RADIUS + ROPE_LENGTH);
		GLine rope = new GLine(ropeX, ropeY, ropeX, ROPE_LENGTH + ropeY);
		add(scaffold);
		add(beam);
		add(rope);
	}

	/**
	 * Updates the word on the screen to correspond to the current state of the
	 * game. The argument string shows what letters have been guessed so far;
	 * unguessed letters are indicated by hyphens.
	 */
	public void displayWord(String word) {
		if (wordDisplay != null) {
			remove(wordDisplay);
		}
		wordDisplay = new GLabel(word);
		wordDisplay.setFont("Helvetica-32");
		add(wordDisplay, getWidth() / 4, getHeight() / 2 + 1.5 * LEG_LENGTH);
	}

	/**
	 * Updates the display to correspond to an incorrect guess by the user.
	 * Calling this method causes the next body part to appear on the scaffold
	 * and adds the letter to the list of incorrect guesses that appears at the
	 * bottom of the window.
	 */
	public void noteIncorrectGuess(char letter) {
		if (incorrectLettersLabel != null) {
			remove(incorrectLettersLabel);
		}
		incorrectLetterString += letter;
		incorrectLettersLabel = new GLabel(incorrectLetterString);
		incorrectLettersLabel.setFont("Helvetica-18");
		incorrectLettersLabel.setColor(Color.RED);
		add(incorrectLettersLabel, getWidth() / 4, getHeight() / 2 + 2
				* LEG_LENGTH);
		addBodyPart();
	}
	
	/**
	 * Adds a body part of the correct order
	 */
	private void addBodyPart() {
		int bodyPartIndex = incorrectLetterString.length();
		switch (bodyPartIndex) {
		case 1:
			addHead();
			break;
		case 2:
			addBody();
			break;
		case 3:
			addLeftArm();
			break;
		case 4:
			addRightArm();
			break;
		case 5:
			addLeftLeg();
			break;
		case 6:
			addRightLeg();
			break;
		case 7:
			addLeftFoot();
			break;
		case 8:
			addRightFoot();
			break;
		}
	}
	
	/**
	 * Adds head when called
	 */
	private void addHead() {
		double headX = getWidth() / 2 - HEAD_RADIUS;
		double headY = getHeight() / 2 - BODY_LENGTH - 2 * HEAD_RADIUS;
		GOval head = new GOval(headX, headY, 2 * HEAD_RADIUS, 2 * HEAD_RADIUS);
		add(head);
	}
	
	/**
	 * adds body when called
	 */
	private void addBody() {
		double bodyX = getWidth() / 2;
		double bodyY = getHeight() / 2 - BODY_LENGTH;
		GLine body = new GLine(bodyX, bodyY, bodyX, bodyY + BODY_LENGTH);
		add(body);
	}
	
	/**
	 * adds left arm when called
	 */
	private void addLeftArm() {
		double leftArmX = getWidth() / 2 - UPPER_ARM_LENGTH;
		double leftArmY = getHeight() / 2 - BODY_LENGTH + ARM_OFFSET_FROM_HEAD;
		GLine leftUpperArm = new GLine(leftArmX, leftArmY, leftArmX
				+ UPPER_ARM_LENGTH, leftArmY);
		GLine leftLowerArm = new GLine(leftArmX, leftArmY, leftArmX, leftArmY
				+ LOWER_ARM_LENGTH);
		add(leftUpperArm);
		add(leftLowerArm);
	}

	/**
	 * adds right arm when called
	 */
	private void addRightArm() {
		double rightArmX = getWidth() / 2 + UPPER_ARM_LENGTH;
		double rightArmY = getHeight() / 2 - BODY_LENGTH + ARM_OFFSET_FROM_HEAD;
		GLine rightUpperArm = new GLine(rightArmX, rightArmY, rightArmX
				- UPPER_ARM_LENGTH, rightArmY);
		GLine rightLowerArm = new GLine(rightArmX, rightArmY, rightArmX,
				rightArmY + LOWER_ARM_LENGTH);
		add(rightUpperArm);
		add(rightLowerArm);
	}

	/**
	 *adds left leg when called
	 */
	private void addLeftLeg() {
		double leftLegX = getWidth() / 2 - HIP_WIDTH;
		double leftLegY = getHeight() / 2;
		GLine leftHip = new GLine(leftLegX, leftLegY, leftLegX + HIP_WIDTH,
				leftLegY);
		GLine leftLeg = new GLine(leftLegX, leftLegY, leftLegX, leftLegY
				+ LEG_LENGTH);
		add(leftHip);
		add(leftLeg);
	}

	/**
	 * adds right leg when called
	 */
	private void addRightLeg() {
		double rightLegX = getWidth() / 2 + HIP_WIDTH;
		double rightLegY = getHeight() / 2;
		GLine rightHip = new GLine(rightLegX, rightLegY, rightLegX - HIP_WIDTH,
				rightLegY);
		GLine rightLeg = new GLine(rightLegX, rightLegY, rightLegX, rightLegY
				+ LEG_LENGTH);
		add(rightHip);
		add(rightLeg);
	}

	/**
	 * adds left foot when called
	 */
	private void addLeftFoot() {
		double leftFootX = getWidth() / 2 - HIP_WIDTH;
		double leftFootY = getHeight() / 2 + LEG_LENGTH;
		GLine leftFoot = new GLine(leftFootX, leftFootY, leftFootX
				- FOOT_LENGTH, leftFootY);
		add(leftFoot);
	}

	/**
	 * adds right foot when called
	 */
	private void addRightFoot() {
		double rightFootX = getWidth() / 2 + HIP_WIDTH;
		double rightFootY = getHeight() / 2 + LEG_LENGTH;
		GLine rightFoot = new GLine(rightFootX, rightFootY, rightFootX
				+ FOOT_LENGTH, rightFootY);
		add(rightFoot);
	}

	/* Constants for the simple version of the picture (in pixels) */
	private static final int SCAFFOLD_HEIGHT = 360;
	private static final int BEAM_LENGTH = 144;
	private static final int ROPE_LENGTH = 18;
	private static final int HEAD_RADIUS = 36;
	private static final int BODY_LENGTH = 144;
	private static final int ARM_OFFSET_FROM_HEAD = 28;
	private static final int UPPER_ARM_LENGTH = 72;
	private static final int LOWER_ARM_LENGTH = 44;
	private static final int HIP_WIDTH = 36;
	private static final int LEG_LENGTH = 108;
	private static final int FOOT_LENGTH = 28;
	private GLabel incorrectLettersLabel;
	private GLabel wordDisplay;
	private String incorrectLetterString;
}
